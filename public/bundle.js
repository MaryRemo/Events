(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _eventsCollection = _interopRequireDefault(require("./eventsCollection"));

var _eventList = _interopRequireDefault(require("./eventList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const eventEditForm = {
  createAndAppendForm(eventToEdit) {
    let eventNameField = document.createElement("p");
    let eventNameLabels = document.createElement("label");
    eventNameLabels.textContent = "Events";
    let eventNameInput = document.createElement("input");
    eventNameInput.value = eventToEdit.event;
    eventNameField.appendChild(eventNameLabels);
    eventNameField.appendChild(eventNameInput);
    let eventDateField = document.createElement("p");
    let eventDateNameLabel = document.createElement("label");
    eventDateNameLabel.textContent = "Date";
    let eventDateNameInput = document.createElement("input");
    eventDateNameInput.value = eventToEdit.date;
    eventDateField.appendChild(eventDateNameLabel);
    eventDateField.appendChild(eventDateNameInput);
    let eventLocationField = document.createElement("p");
    let eventLocationNameLabel = document.createElement("label");
    eventLocationNameLabel.textContent = "Location";
    let eventLocationNameInput = document.createElement("input");
    eventLocationNameInput.value = eventToEdit.location;
    eventLocationField.appendChild(eventLocationNameLabel);
    eventLocationField.appendChild(eventLocationNameInput);
    let updateButton = document.createElement("button");
    updateButton.textContent = "Update";
    updateButton.addEventListener("click", () => {
      let editedEvents = {
        event: eventNameInput.value,
        date: eventDateNameInput.value,
        location: eventLocationNameInput.value
      };

      _eventsCollection.default.editEvent(eventToEdit.id, editedEvents).then(response => {
        _eventList.default.eventify();

        console.log(response);
        let eventItemArticle = document.querySelector(".displayEditEvents");
        eventItemArticle.innerHTML = "";
      });
    });
    let eventItemArticle = document.querySelector(".displayEditEvents"); // while (eventItemArticle.firstChild) {
    //     eventItemArticle.removeChild(eventItemArticle.firstChild)
    // }

    eventItemArticle.innerHTML = "", eventItemArticle.appendChild(eventNameField);
    eventItemArticle.appendChild(eventDateField);
    eventItemArticle.appendChild(eventLocationField);
    eventItemArticle.appendChild(updateButton);
  }

};
var _default = eventEditForm;
exports.default = _default;

},{"./eventList":3,"./eventsCollection":5}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _eventsCollection = _interopRequireDefault(require("./eventsCollection"));

var _eventList = _interopRequireDefault(require("./eventList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const eventBuilder = {
  eventBuilding() {
    let eventHeader = document.createElement("h2");
    eventHeader.textContent = "Events";
    eventHeader.setAttribute("id", "formEvents_id");
    let contactEventField = document.createElement("fieldset");
    let eventNameLabel = document.createElement("label");
    eventNameLabel.setAttribute("for", "event__name");
    let inputEvent = document.createElement("input");
    inputEvent.setAttribute("id", "eventName");
    inputEvent.placeholder = "Event Name";
    inputEvent.setAttribute("name", "Event-name");
    contactEventField.appendChild(eventNameLabel);
    contactEventField.appendChild(inputEvent);
    let dateField = document.createElement("fieldset");
    let dateLabel = document.createElement("label");
    dateLabel.setAttribute("for", "date");
    let inputDate = document.createElement("input");
    inputDate.setAttribute("id", "eventDate");
    inputDate.placeholder = "Date";
    inputDate.setAttribute("name", "event-Date");
    dateField.appendChild(dateLabel);
    dateField.appendChild(inputDate);
    let locationField = document.createElement("fieldset");
    let locationLabel = document.createElement("label");
    locationLabel.setAttribute("for", "location");
    let inputLocation = document.createElement("input");
    inputLocation.setAttribute("id", "eventLocation");
    inputLocation.placeholder = "Location";
    inputLocation.setAttribute("name", "event-location");
    locationField.appendChild(locationLabel);
    locationField.appendChild(inputLocation);
    let submitButton = document.createElement("button");
    submitButton.textContent = "Add Event";
    submitButton.setAttribute("class", "event-save");
    submitButton.addEventListener("click", this.handleAddNewEvent);
    let eventFormFragment = document.createDocumentFragment();
    eventFormFragment.appendChild(eventHeader);
    eventFormFragment.appendChild(contactEventField);
    eventFormFragment.appendChild(dateField);
    eventFormFragment.appendChild(locationField);
    eventFormFragment.appendChild(submitButton);
    let formArticle = document.querySelector(".formEvents");
    formArticle.appendChild(eventFormFragment);
    return inputEvent;
  },

  handleAddNewEvent() {
    let inputEventName = document.querySelector("#eventName").value;
    let inputEventDate = document.querySelector("#eventDate").value;
    let inputEventLocation = document.querySelector("#eventLocation").value;
    console.log(inputEventLocation);
    let newEvent = {
      event: inputEventName,
      date: inputEventDate,
      location: inputEventLocation
    };

    _eventsCollection.default.postAllEvents(newEvent).then(response => {
      _eventList.default.eventify();

      console.log(response);
    });
  }

};
var _default = eventBuilder;
exports.default = _default;

},{"./eventList":3,"./eventsCollection":5}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _eventsCollection = _interopRequireDefault(require("./eventsCollection"));

var _events = _interopRequireDefault(require("./events"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const eventList = {
  eventify() {
    _eventsCollection.default.getAllEvents().then(allEvents => {
      allEvents.sort(function (a, b) {
        // Turn your strings into dates, and then subtract them
        // to get a value that is either negative, positive, or zero.
        return new Date(a.date) - new Date(b.date);
      });
      let eventDocFragment = document.createDocumentFragment();
      allEvents.forEach(eventItem => {
        let eventHTML = _events.default.eventBuilder(eventItem);

        eventDocFragment.appendChild(eventHTML);
      });
      let outputArticle = document.querySelector(".displayEvents");

      while (outputArticle.firstChild) {
        outputArticle.removeChild(outputArticle.firstChild);
      }

      outputArticle.appendChild(eventDocFragment);
    });
  }

};
var _default = eventList;
exports.default = _default;

},{"./events":4,"./eventsCollection":5}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _eventsCollection = _interopRequireDefault(require("./eventsCollection"));

var _eventList = _interopRequireDefault(require("./eventList"));

var _editForm = _interopRequireDefault(require("./editForm"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const createEvent = {
  eventBuilder(eventObject) {
    let eventArticle = document.createElement("fieldset");
    let eventName = document.createElement("h3");
    eventName.textContent = eventObject.event;
    let eventDate = document.createElement("section");
    eventDate.textContent = eventObject.date;
    let eventLocation = document.createElement("section");
    eventLocation.textContent = eventObject.location;
    let editButton = document.createElement("button");
    editButton.textContent = "Edit Event";
    editButton.setAttribute("id", `editEvent--${eventObject.id}`);
    editButton.addEventListener("click", () => {
      let articleID = event.target.id;
      console.log(articleID);
      let eventId = articleID.split("--")[1];
      console.log(eventId);

      _eventsCollection.default.getEvent(eventId).then(response => {
        _editForm.default.createAndAppendForm(response);
      });
    });
    let deleteButton = document.createElement("button");
    deleteButton.textContent = "Delete Event";
    deleteButton.setAttribute("id", `deleteEvent--${eventObject.id}`);
    deleteButton.addEventListener("click", () => {
      console.log(event);
      let eventId = event.target.id.split("--")[1];

      _eventsCollection.default.deleteEvents(eventId).then(response => {
        _eventList.default.eventify();

        console.log(response);
      });
    });
    eventArticle.appendChild(eventName);
    eventArticle.appendChild(eventDate);
    eventArticle.appendChild(eventLocation);
    eventArticle.appendChild(deleteButton);
    eventArticle.appendChild(editButton);
    return eventArticle;
  }

};
var _default = createEvent;
exports.default = _default;

},{"./editForm":1,"./eventList":3,"./eventsCollection":5}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const eventsCollection = {
  getAllEvents() {
    return fetch("http://localhost:8088/Events").then(response => response.json());
  },

  postAllEvents(newEventToSave) {
    return fetch("http://localhost:8088/Events", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(newEventToSave)
    }); // location.reload(true);
  },

  deleteEvents(eventId) {
    return fetch(`http://localhost:8088/Events/${eventId}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json"
      }
    });
  },

  getEvent(eventId) {
    return fetch(`http://localhost:8088/Events/${eventId}`).then(response => response.json());
  },

  editEvent(eventId, eventToEdit) {
    return fetch(`http://localhost:8088/Events/${eventId}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(eventToEdit)
    });
  }

};
var _default = eventsCollection;
exports.default = _default;

},{}],6:[function(require,module,exports){
"use strict";

var _eventList = _interopRequireDefault(require("./eventList"));

var _eventBuilder = _interopRequireDefault(require("./eventBuilder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_eventList.default.eventify();

_eventBuilder.default.eventBuilding();

},{"./eventBuilder":2,"./eventList":3}]},{},[6])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
